#!/bin/sh
set -eu

VACKPATH=${VACKPATH-$HOME/.vim/pack/vack}

usage() {
  cat <<__USAGE__ >&2
usage: ${0##*/} <command> [...]
manage Vim plugins.

commands:
  i|install [-os] <repository>...   # install the plugins
  u|update [-a] <plugin>...         # update the plugins
  r|remove <plugin>...              # remove the plugins
  l|list [-aos]                     # list installed plugins
  p|path [-a] <plugin>...           # show the path of the plugins
  e|enable <plugin>...              # move the plugins to start
  d|disable <plugin>...             # move the plugins to opt
  I|init                            # create the plugin directory
  h|help                            # print usage

environment-variables:
  VACKPATH   # the plugin directory (default: \$HOME/.vim/pack/vack)
__USAGE__
}

warn() {
  printf "%s\n" "${0##*/}: $*" >&2
}

to_start_plugin_path() {
  plugin=$1
  printf "%s\n" "$VACKPATH/start/${plugin##*/}"
}

to_opt_plugin_path() {
  plugin=$1
  printf "%s\n" "$VACKPATH/opt/${plugin##*/}"
}

to_installed_plugin_path() {
  plugin=$1
  start=$(to_start_plugin_path "$plugin")
  opt=$(to_opt_plugin_path "$plugin")
  if [ -d "$start" ]; then
    printf "%s\n" "$start"
  elif [ -d "$opt" ]; then
    printf "%s\n" "$opt"
  else
    echo
  fi
}

to_destination_plugin_path() {
  plugin=$1
  plugin_type=$2
  case $plugin_type in
    start) printf "%s\n" "$(to_start_plugin_path "$plugin")" ;;
    opt)   printf "%s\n" "$(to_opt_plugin_path "$plugin")" ;;
    *)     echo ;;
  esac
}

to_source_url() {
  plugin=$1
  printf "%s\n" "$plugin" | awk '
    /^[^\/]+$/                 { print "https://github.com/vim-scripts/" $0; next }
    /^[^\/]+\/[^\/]+$/         { print "https://github.com/" $0; next }
    /^[^\/]+\/[^\/]+\/[^\/]+$/ { print "https://" $0; next }
                               { print $0; next }
  '
}

list_start_plugin() {
  ls -- "$VACKPATH/start" | cat
}

list_opt_plugin() {
  ls -- "$VACKPATH/opt" | cat
}

list_all_plugin() {
  list_start_plugin
  list_opt_plugin
}

helptags() {
  plugin_path=$1
  doc_path=$plugin_path/doc
  if [ -d "$doc_path" ]; then
    vim +"helptags $doc_path" +"qa"
  fi
}

cmd_install() {
  plugin_type=start
  while getopts "os" OPT; do
    case $OPT in
      o) plugin_type=opt ;;
      s) plugin_type=start ;;
      *) exit 2 ;;
    esac
  done
  shift $(($OPTIND - 1))

  if [ $# -lt 1 ]; then
    warn "no input plugins"
    exit 2
  fi

  for plugin in "$@"; do
    src_url=$(to_source_url "$plugin")
    dst_path=$(to_destination_plugin_path "$plugin" "$plugin_type")
    if [ ! -d "$dst_path" ]; then
      git clone --quiet --depth=1 -- "$src_url" "$dst_path"
      helptags "$dst_path"
    fi
  done
}

cmd_update() {
  update_all=false
  while getopts "a" OPT; do
    case $OPT in
      a) update_all=true ;;
      *) exit 2 ;;
    esac
  done
  shift $(($OPTIND - 1))

  if ! "$update_all" && [ $# -lt 1 ]; then
    warn "no input plugins"
    exit 2
  fi

  if "$update_all"; then
    for path in "$VACKPATH/start/"* "$VACKPATH/opt/"*; do
      if [ -d "$path" ] && [ -d "$path/.git" ]; then
        (cd "$path"; git pull --quiet --no-ff; helptags "$path")
      fi
    done
  else
    for plugin in "$@"; do
      path=$(to_installed_plugin_path "$plugin")
      if [ -d "$path" ] && [ -d "$path/.git" ]; then
        (cd "$path"; git pull --quiet --no-ff; helptags "$path")
      fi
    done
  fi
}

cmd_remove() {
  while getopts "" OPT; do
    case $OPT in
      *) exit 2 ;;
    esac
  done
  shift $(($OPTIND - 1))

  if [ $# -lt 1 ]; then
    warn "no input plugins"
    exit 2
  fi

  for plugin in "$@"; do
    path=$(to_installed_plugin_path "$plugin")
    if [ -d "$path" ]; then
      rm -rf -- "$path"
    fi
  done
}

cmd_list() {
  plugin_type=all
  while getopts "aos" OPT; do
    case $OPT in
      a) plugin_type=all ;;
      o) plugin_type=opt ;;
      s) plugin_type=start ;;
      *) exit 2 ;;
    esac
  done
  shift $(($OPTIND - 1))

  case $plugin_type in
    all)   list_all_plugin   ;;
    start) list_start_plugin ;;
    opt)   list_opt_plugin   ;;
  esac
}

cmd_path() {
  show_all=false
  while getopts "a" OPT; do
    case $OPT in
      a) show_all=true ;;
      *) exit 2 ;;
    esac
  done
  shift $(($OPTIND - 1))

  if ! "$show_all" && [ $# -lt 1 ]; then
    warn "no input plugins"
    exit 2
  fi

  if "$show_all"; then
    for path in "$VACKPATH/start/"* "$VACKPATH/opt/"*; do
      if [ -d "$path" ]; then
        printf "%s\n" "$path"
      fi
    done
  else
    for plugin in "$@"; do
      path=$(to_installed_plugin_path "$plugin")
      if [ -d "$path" ]; then
        printf "%s\n" "$path"
      fi
    done
  fi
}

cmd_enable() {
  while getopts "" OPT; do
    case $OPT in
      *) exit 2 ;;
    esac
  done
  shift $(($OPTIND - 1))

  if [ $# -lt 1 ]; then
    warn "no input plugins"
    exit 2
  fi

  for plugin in "$@"; do
    src=$(to_opt_plugin_path "$plugin")
    dst=$(to_start_plugin_path "$plugin")
    if [ -d "$src" ] && [ ! -d "$dst" ]; then
      mv -- "$src" "$dst"
    fi
  done
}

cmd_disable() {
  while getopts "" OPT; do
    case $OPT in
      *) exit 2 ;;
    esac
  done
  shift $(($OPTIND - 1))

  if [ $# -lt 1 ]; then
    warn "no input plugins"
    exit 2
  fi

  for plugin in "$@"; do
    src=$(to_start_plugin_path "$plugin")
    dst=$(to_opt_plugin_path "$plugin")
    if [ -d "$src" ] && [ ! -d "$dst" ]; then
      mv -- "$src" "$dst"
    fi
  done
}

cmd_init() {
  while getopts "" OPT; do
    case $OPT in
      *) exit 2 ;;
    esac
  done
  shift $(($OPTIND - 1))

  mkdir -p -- "$VACKPATH"
  mkdir -p -- "$VACKPATH/start"
  mkdir -p -- "$VACKPATH/opt"
}

cmd_help() {
  while getopts "" OPT; do
    case $OPT in
      *) exit 2 ;;
    esac
  done
  shift $(($OPTIND - 1))

  usage 2>&1
}

main() {
  if [ $# -lt 1 ]; then
    usage
    exit 2
  fi

  cmd=$1
  shift
  case $cmd in
    i|install) cmd_install "$@" ;;
    u|update)  cmd_update  "$@" ;;
    r|remove)  cmd_remove  "$@" ;;
    l|list)    cmd_list    "$@" ;;
    p|path)    cmd_path    "$@" ;;
    e|enable)  cmd_enable  "$@" ;;
    d|disable) cmd_disable "$@" ;;
    I|init)    cmd_init    "$@" ;;
    h|help)    cmd_help    "$@" ;;
    *) warn "$cmd: sub command not found"; exit 2 ;;
  esac
}

main "$@"
